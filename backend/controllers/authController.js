const sql = require("mssql");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

// üîê ƒêƒÉng nh·∫≠p
exports.login = async (req, res) => {
  try {
    const { ten_dang_nhap, mat_khau } = req.body;
    if (!ten_dang_nhap || !mat_khau) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒëƒÉng nh·∫≠p!" });
    }

    const pool = await sql.connect(process.env.SQLSERVER);
    const result = await pool
      .request()
      .input("ten_dang_nhap", sql.VarChar(50), ten_dang_nhap)
      .query("SELECT * FROM TaiKhoan WHERE ten_dang_nhap = @ten_dang_nhap");

    if (result.recordset.length === 0) {
      return res.status(401).json({ message: "T√™n ƒëƒÉng nh·∫≠p kh√¥ng t·ªìn t·∫°i!" });
    }

    const user = result.recordset[0];

    // So s√°nh m·∫≠t kh·∫©u (gi·∫£ s·ª≠ m·∫≠t kh·∫©u ƒë√£ hash b·∫±ng bcrypt)
    // const isMatch = await bcrypt.compare(mat_khau, user.mat_khau);
    // if (!isMatch) {
    //   return res.status(401).json({ message: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!" });
    // }

    if (mat_khau !== user.mat_khau) {
        return res.status(401).json({ message: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!" });
        }

    // T·∫°o JWT Token
    const token = jwt.sign(
      { id: user.id, vai_tro: user.vai_tro },
      process.env.JWT_SECRET || "SECRET_KEY",
      { expiresIn: "1d" }
    );

    res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", token });
  } catch (err) {
    console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", err);
    res.status(500).json({ message: "L·ªói khi ƒëƒÉng nh·∫≠p" });
  }
};

// üë§ L·∫•y th√¥ng tin t√†i kho·∫£n hi·ªán t·∫°i
exports.getCurrentUser = async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader)
      return res.status(401).json({ message: "Thi·∫øu token x√°c th·ª±c!" });

    const token = authHeader.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET || "SECRET_KEY");

    const pool = await sql.connect(process.env.SQLSERVER);
    const result = await pool
      .request()
      .input("id", sql.Int, decoded.id)
      .query(`
        SELECT tk.id, tk.ten_dang_nhap, tk.vai_tro, nv.ten_nv, nv.email, nv.so_dt, nv.ngay_sinh
        FROM TaiKhoan tk
        JOIN NhanVien nv ON tk.ma_nv = nv.id
        WHERE tk.id = @id
      `);

    if (result.recordset.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!" });

    res.json(result.recordset[0]);
  } catch (err) {
    console.error("L·ªói khi l·∫•y th√¥ng tin t√†i kho·∫£n:", err);
    res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
  }
};
