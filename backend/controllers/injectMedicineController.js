const sql = require("mssql");

// üì¶ L·∫•y danh s√°ch ti√™m thu·ªëc
exports.getVaccinations = async (req, res) => {
  try {
    const pool = await sql.connect(process.env.SQLSERVER);
    const result = await pool.request().query(`
      SELECT tt.id, 
             h.id AS ma_heo, 
             h.suc_khoe, 
             nv.ten_nv, 
             th.ten_thuoc, 
             tt.lieu_luong, 
             tt.ngay_tiem, 
             tt.ghi_chu
      FROM TiemThuocHeo tt
      JOIN Heo h ON tt.ma_heo = h.id
      JOIN Thuoc th ON tt.ma_thuoc = th.id
      JOIN NhanVien nv ON tt.ma_nv = nv.id
      WHERE nv.chuc_vu = 4 -- ch·ªâ l·∫•y nh√¢n vi√™n k·ªπ thu·∫≠t
      ORDER BY tt.ngay_tiem DESC
    `);
    res.json(result.recordset);
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch ti√™m thu·ªëc:", error);
    res.status(500).json({ message: error.message });
  }
};

// üì¶ L·∫•y 1 l·∫ßn ti√™m thu·ªëc theo ID
exports.getVaccinationById = async (req, res) => {
  try {
    const { id } = req.params;
    const pool = await sql.connect(process.env.SQLSERVER);
    const result = await pool.request()
      .input("id", sql.Int, id)
      .query(`
        SELECT tt.*, 
               h.id AS ma_heo, 
               h.suc_khoe, 
               nv.ten_nv, 
               th.ten_thuoc
        FROM TiemThuocHeo tt
        JOIN Heo h ON tt.ma_heo = h.id
        JOIN Thuoc th ON tt.ma_thuoc = th.id
        JOIN NhanVien nv ON tt.ma_nv = nv.id
        WHERE tt.id = @id AND nv.chuc_vu = 4
      `);

    if (result.recordset.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi ti√™m thu·ªëc" });

    res.json(result.recordset[0]);
  } catch (error) {
    console.error("L·ªói khi l·∫•y ti√™m thu·ªëc:", error);
    res.status(500).json({ message: error.message });
  }
};

// ‚ûï Th√™m b·∫£n ghi ti√™m thu·ªëc
exports.addVaccination = async (req, res) => {
  try {
    const { ma_heo, ma_thuoc, ma_nv, lieu_luong, ghi_chu, ngay_tiem } = req.body;

    // üß© Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
    if (!ma_heo || !ma_thuoc || !ma_nv || !lieu_luong || !ngay_tiem)
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc (bao g·ªìm ng√†y ti√™m)!" });

    const pool = await sql.connect(process.env.SQLSERVER);

    // üß© Ki·ªÉm tra xem nh√¢n vi√™n c√≥ ph·∫£i k·ªπ thu·∫≠t kh√¥ng
    const checkNV = await pool.request()
      .input("ma_nv", sql.Int, ma_nv)
      .query(`SELECT chuc_vu FROM NhanVien WHERE id = @ma_nv`);

    if (checkNV.recordset.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n!" });

    if (checkNV.recordset[0].chuc_vu !== 4)
      return res.status(403).json({ message: "Nh√¢n vi√™n kh√¥ng c√≥ quy·ªÅn ti√™m thu·ªëc (kh√¥ng ph·∫£i k·ªπ thu·∫≠t)!" });

    // üß© Th√™m b·∫£n ghi ti√™m thu·ªëc
    await pool.request()
      .input("ma_heo", sql.Int, ma_heo)
      .input("ma_thuoc", sql.Int, ma_thuoc)
      .input("ma_nv", sql.Int, ma_nv)
      .input("lieu_luong", sql.NVarChar, lieu_luong)
      .input("ghi_chu", sql.NVarChar, ghi_chu || null)
      .input("ngay_tiem", sql.Date, ngay_tiem)
      .query(`
        INSERT INTO TiemThuocHeo (ma_heo, ma_thuoc, ma_nv, lieu_luong, ghi_chu, ngay_tiem)
        VALUES (@ma_heo, @ma_thuoc, @ma_nv, @lieu_luong, @ghi_chu, @ngay_tiem)
      `);

    res.status(201).json({ message: "Th√™m b·∫£n ghi ti√™m thu·ªëc th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói khi th√™m ti√™m thu·ªëc:", error);
    res.status(500).json({ message: error.message });
  }
};


// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin ti√™m thu·ªëc
exports.updateVaccination = async (req, res) => {
  try {
    const { id } = req.params;
    const { ma_heo, ma_thuoc, ma_nv, lieu_luong, ghi_chu, ngay_tiem } = req.body;

    const pool = await sql.connect(process.env.SQLSERVER);

    // ‚úÖ Ki·ªÉm tra xem nh√¢n vi√™n c√≥ ph·∫£i k·ªπ thu·∫≠t kh√¥ng
    const checkNV = await pool.request()
      .input("ma_nv", sql.Int, ma_nv)
      .query(`SELECT chuc_vu FROM NhanVien WHERE id = @ma_nv`);

    if (checkNV.recordset.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n!" });

    if (checkNV.recordset[0].chuc_vu !== 4)
      return res.status(403).json({ message: "Nh√¢n vi√™n kh√¥ng c√≥ quy·ªÅn ti√™m thu·ªëc (kh√¥ng ph·∫£i k·ªπ thu·∫≠t)!" });

    const result = await pool.request()
      .input("id", sql.Int, id)
      .input("ma_heo", sql.Int, ma_heo)
      .input("ma_thuoc", sql.Int, ma_thuoc)
      .input("ma_nv", sql.Int, ma_nv)
      .input("lieu_luong", sql.NVarChar, lieu_luong)
      .input("ghi_chu", sql.NVarChar, ghi_chu)
      .input("ngay_tiem", sql.Date, ngay_tiem)
      .query(`
        UPDATE TiemThuocHeo
        SET ma_heo = @ma_heo, 
            ma_thuoc = @ma_thuoc, 
            ma_nv = @ma_nv,
            lieu_luong = @lieu_luong, 
            ghi_chu = @ghi_chu, 
            ngay_tiem = @ngay_tiem
        WHERE id = @id
      `);

    if (result.rowsAffected[0] === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi ti√™m thu·ªëc" });

    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t ti√™m thu·ªëc:", error);
    res.status(500).json({ message: error.message });
  }
};

// ‚ùå X√≥a b·∫£n ghi ti√™m thu·ªëc
exports.deleteVaccination = async (req, res) => {
  try {
    const { id } = req.params;
    const pool = await sql.connect(process.env.SQLSERVER);
    const result = await pool.request().input("id", sql.Int, id)
      .query("DELETE FROM TiemThuocHeo WHERE id = @id");

    if (result.rowsAffected[0] === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi ƒë·ªÉ x√≥a" });

    res.json({ message: "X√≥a b·∫£n ghi ti√™m thu·ªëc th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói khi x√≥a ti√™m thu·ªëc:", error);
    res.status(500).json({ message: error.message });
  }
};
